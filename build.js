#!/usr/bin/env node
/**
 * Node.js build script for Vercel deployment
 * Generates static HTML with embedded JSON data
 */

const fs = require('fs');
const path = require('path');

function copyDirectory(src, dest) {
    if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, { recursive: true });
    }
    
    const entries = fs.readdirSync(src, { withFileTypes: true });
    
    for (const entry of entries) {
        const srcPath = path.join(src, entry.name);
        const destPath = path.join(dest, entry.name);
        
        if (entry.isDirectory()) {
            copyDirectory(srcPath, destPath);
        } else {
            fs.copyFileSync(srcPath, destPath);
        }
    }
}

function createStaticSite() {
    console.log('üöÄ Building static site...');
    
    // Create dist directory
    const distDir = 'dist';
    if (fs.existsSync(distDir)) {
        fs.rmSync(distDir, { recursive: true, force: true });
    }
    fs.mkdirSync(distDir, { recursive: true });
    
    // Copy static assets
    const staticSrc = 'service_call_analyzer/static';
    if (fs.existsSync(staticSrc)) {
        console.log('üìÅ Copying static assets...');
        copyDirectory(staticSrc, distDir);
    }
    
    // Load data
    console.log('üìä Loading call data...');
    const callDataPath = 'service_call_analyzer/media/call.json';
    const customAnalysisPath = 'service_call_analyzer/static/custom_analysis.json';
    
    if (!fs.existsSync(callDataPath)) {
        console.error('‚ùå Call data file not found:', callDataPath);
        process.exit(1);
    }
    
    if (!fs.existsSync(customAnalysisPath)) {
        console.error('‚ùå Custom analysis file not found:', customAnalysisPath);
        process.exit(1);
    }
    
    const callData = JSON.parse(fs.readFileSync(callDataPath, 'utf8'));
    const customAnalysis = JSON.parse(fs.readFileSync(customAnalysisPath, 'utf8'));
    
    // Create HTML with embedded data
    console.log('üîß Generating HTML...');
    const htmlContent = createHtmlWithData(callData, customAnalysis);
    
    // Write index.html
    fs.writeFileSync(path.join(distDir, 'index.html'), htmlContent, 'utf8');
    
    console.log('‚úÖ Static site generated successfully!');
    console.log('üìÅ Output directory: dist/');
    
    // List generated files
    const files = getAllFiles(distDir);
    console.log(`üìä Generated ${files.length} files`);
}

function createHtmlWithData(callData, customAnalysis) {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Service Call Analysis</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="/css/main.css" rel="stylesheet">
</head>
<body>
    <!-- Navigation Header -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="bi bi-telephone-fill me-2"></i>
                Service Call Analyzer
            </a>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="main-content">
        <div id="app">
            <!-- Content will be generated by JavaScript -->
            <div class="container-fluid">
                <div class="row">
                    <div class="col-12 text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Loading call analysis...</p>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Embedded Data -->
    <script>
        window.CALL_DATA = ${JSON.stringify(callData, null, 2)};
        window.CUSTOM_ANALYSIS = ${JSON.stringify(customAnalysis, null, 2)};
    </script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Custom JS -->
    <script src="/js/main.js"></script>
    <script src="/js/app.js"></script>
</body>
</html>`;
}

function getAllFiles(dir) {
    const files = [];
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    
    for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        if (entry.isDirectory()) {
            files.push(...getAllFiles(fullPath));
        } else {
            files.push(fullPath);
        }
    }
    
    return files;
}

// Run the build
if (require.main === module) {
    createStaticSite();
}

module.exports = { createStaticSite };